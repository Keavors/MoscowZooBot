from telebot import types
import logging

from app import bot
from data.animals import ANIMALS
from data.questions import QUESTIONS
from keyboards import create_keyboard, restart_keyboard, share_keyboard, contact_keyboard, feedback_keyboard
from utils import calculate_result, update_scores

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


def start_handler(bot, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        user_id = message.chat.id
        user_data[user_id] = {
            "score": {animal: 0 for animal in ANIMALS},
            "question_index": 0,
            "feedback": None
        }

        bot.send_message(
            user_id,
            "üêæ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ç–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞!\n"
            "–û—Ç–≤–µ—Ç—å –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞-–æ–ø–µ–∫—É–Ω–∞!\n\n"
            "–ù–∞—á–Ω—ë–º? –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤! ü¶Å"
        )
        ask_question(bot, user_id)
        logging.info(f"User {user_id} started quiz")

    except Exception as e:
        logging.error(f"Error in start_handler: {e}", exc_info=True)
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def ask_question(bot, user_id):
    """–ó–∞–¥–∞—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    try:
        if user_data[user_id]["question_index"] >= len(QUESTIONS):
            show_result(bot, user_id)
            return

        question_data = QUESTIONS[user_data[user_id]["question_index"]]
        progress = f"–í–æ–ø—Ä–æ—Å {user_data[user_id]['question_index'] + 1}/{len(QUESTIONS)}"

        msg = bot.send_message(
            user_id,
            f"üìå {progress}\n{question_data['question']}",
            reply_markup=create_keyboard(question_data["options"])
        )
        bot.register_next_step_handler(msg, lambda m: handle_answer(bot, m))

    except Exception as e:
        logging.error(f"Error asking question: {e}", exc_info=True)
        bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")


def handle_answer(bot, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ø–æ–¥—Å—á—ë—Ç–æ–º –±–∞–ª–ª–æ–≤"""
    try:
        user_id = message.chat.id

        if user_id not in user_data:
            bot.send_message(user_id, "üåÄ –ù–∞—á–Ω–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ: /start")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        current_question = QUESTIONS[user_data[user_id]["question_index"]]
        if message.text not in current_question["options"]:
            bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫!")
            ask_question(bot, user_id)
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
        user_data[user_id]["score"] = update_scores(
            user_data[user_id]["score"],
            current_question["weights"]
        )

        user_data[user_id]["question_index"] += 1
        ask_question(bot, user_id)

    except Exception as e:
        logging.error(f"Error handling answer: {e}", exc_info=True)
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")


def show_result(bot, user_id):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
    try:
        result_animal = calculate_result(user_data[user_id]["score"])
        animal_data = ANIMALS[result_animal]

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
        description = (
            f"üéâ –¢–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî *{result_animal}*!\n\n"
            f"{animal_data['description']}\n\n"
            f"üêæ –•–æ—á–µ—à—å –≤–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É —ç—Ç–æ–≥–æ –∫—Ä–∞—Å–∞–≤—Ü–∞? "
            f"–ü–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ [—Å–∞–π—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã]({animal_data['opeka_link']})!"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        bot.send_photo(
            user_id,
            animal_data['image'],
            caption=description,
            parse_mode='Markdown',
            reply_markup=types.ReplyKeyboardRemove()
        )

        # –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="restart"),
            types.InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share")
        )
        markup.row(
            types.InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback"),
            types.InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact")
        )

        bot.send_message(
            user_id,
            "üëá –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=markup
        )

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—Ä–æ–º–µ –æ—Ç–∑—ã–≤–∞)
        del user_data[user_id]['score']
        del user_data[user_id]['question_index']

    except Exception as e:
        logging.error(f"Error showing result: {e}", exc_info=True)
        bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")


def handle_callback(bot, call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫"""
    try:
        user_id = call.message.chat.id

        if call.data == "restart":
            start_handler(bot, call.message)

        elif call.data == "share":
            result_animal = calculate_result(user_data.get(user_id, {}).get("score", {}))
            share_text = (
                f"–ú–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ ‚Äî {result_animal}! üêØ\n"
                f"–ü—Ä–æ–π–¥–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–π —Å–≤–æ—ë: https://t.me/your_bot_name"
            )
            bot.send_message(
                user_id,
                f"üì≤ –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—èÂàÜ‰∫´:\n\n{share_text}",
                reply_markup=types.ReplyKeyboardRemove()
            )

        elif call.data == "feedback":
            msg = bot.send_message(user_id, "üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:")
            bot.register_next_step_handler(msg, save_feedback)

        elif call.data == "contact":
            result_animal = calculate_result(user_data.get(user_id, {}).get("score", {}))
            contact_info = (
                "üì© –î–ª—è —Å–≤—è–∑–∏ —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–ø–µ–∫–∏:\n\n"
                f"*–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:* {result_animal}\n"
                "‚úâÔ∏è Email: opeka@moscowzoo.ru\n"
                "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 777-77-77\n\n"
                "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π!"
            )
            bot.send_message(
                user_id,
                contact_info,
                parse_mode='Markdown'
            )

    except Exception as e:
        logging.error(f"Callback error: {e}", exc_info=True)
        bot.send_message(user_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def save_feedback(message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π"""
    try:
        user_id = message.chat.id
        feedback = message.text

        if len(feedback) < 10:
            bot.send_message(user_id, "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤. –ù–∞–ø–∏—à–∏ —Ö–æ—Ç—è –±—ã 10 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ –ø–æ—á—Ç—É
        user_data[user_id]["feedback"] = feedback
        bot.send_message(
            user_id,
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —É—á—Ç—ë–º!\n"
            "–ï—Å–ª–∏ —Ç—ã –æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å —Ç–æ–±–æ–π –º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è."
        )
        logging.info(f"Feedback from {user_id}: {feedback[:50]}...")

    except Exception as e:
        logging.error(f"Feedback error: {e}", exc_info=True)
        bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def error_handler(bot, message):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"Unhandled exception: {message}")
    bot.send_message(
        message.chat.id,
        "üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start"
    )