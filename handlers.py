from telebot import types
from telebot.apihelper import ApiException
from bot_instance import bot
from data.animals import ANIMALS
from data.questions import QUESTIONS
from keyboards import create_keyboard
from utils import calculate_result, update_scores
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


def register_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.message_handler(commands=['start'])(start_handler)

    # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    bot.message_handler(func=lambda message: is_user_in_quiz(message))(process_answer)

    # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
    bot.callback_query_handler(func=lambda call: True)(handle_callback)

    # 4. Fallback –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.message_handler(func=lambda message: True)(fallback_handler)


def is_user_in_quiz(message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    user_id = message.chat.id
    return (
            user_id in user_data and
            user_data[user_id].get("question_index", 0) < len(QUESTIONS)
    )

def start_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.chat.id
        user_data[user_id] = {
            "score": {animal: 0 for animal in ANIMALS},
            "question_index": 0,
            "excluded_animals": set(),
            "feedback": None,
            "result_animal": None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
        }

        bot.send_message(
            user_id,
            "üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞!\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ.\n\n"
            "–ù–∞—á–Ω—ë–º? –í—ã–±–∏—Ä–∞–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤! ü¶Å"
        )
        ask_question(user_id)
        logging.info(f"User {user_id} started quiz")

    except Exception as e:
        logging.error(f"Start error: {e}", exc_info=True)
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

def ask_question(user_id):
    """–ó–∞–¥–∞—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
    try:
        if user_data[user_id]["question_index"] >= len(QUESTIONS):
            show_result(user_id)
            return

        question_index = user_data[user_id]["question_index"]
        question_data = QUESTIONS[question_index]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        markup = create_keyboard([option["text"] for option in question_data["options"]])
        progress = f"–í–æ–ø—Ä–æ—Å {question_index + 1}/{len(QUESTIONS)}"

        bot.send_message(
            user_id,
            f"üìå {progress}\n{question_data['question']}",
            reply_markup=markup
        )

    except Exception as e:
        logging.error(f"Ask question error: {e}", exc_info=True)
        bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

def process_answer(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.chat.id
    if user_id not in user_data:
        bot.send_message(user_id, "üåÄ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ: /start")
        return

    current_index = user_data[user_id]["question_index"]
    try:
        current_question = QUESTIONS[current_index]
    except IndexError:
        bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    user_answer = message.text.strip().lower()
    options = {
        opt["text"].strip().lower(): opt
        for opt in current_question["options"]
    }

    if user_answer not in options:
        print(options, user_answer)
        error_msg = (
            "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join([opt['text'] for opt in current_question['options']])}"
        )
        bot.send_message(user_id, error_msg)
        return ask_question(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    selected_option = options[user_answer]

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]["excluded_animals"].update(selected_option["excludes"])
    user_data[user_id]["score"] = update_scores(
        user_data[user_id]["score"],
        selected_option["weights"]
    )
    user_data[user_id]["question_index"] += 1

    ask_question(user_id)

def show_result(user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        total_score = sum(user_data[user_id]["score"].values())
        excluded = user_data[user_id]["excluded_animals"]
        result_animal = calculate_result(total_score, excluded)
        user_data[user_id]["result_animal"] = result_animal  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
        animal_data = ANIMALS[result_animal]

        caption = (
            f"üéâ –í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî *{result_animal}*!\n\n"
            f"{animal_data['description']}\n\n"
            f"üêæ –£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏: [—Å—Å—ã–ª–∫–∞]({animal_data['opeka_link']})"
        )

        bot.send_photo(
            user_id,
            animal_data['image'],
            caption=caption,
            parse_mode='Markdown',
            reply_markup=types.ReplyKeyboardRemove()
        )

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞", callback_data="restart"),
            types.InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share")
        )
        markup.row(
            types.InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback"),
            types.InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact")
        )

        bot.send_message(user_id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–æ–º–µ result_animal –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞)
        keys_to_delete = ['score', 'question_index', 'excluded_animals']
        for key in keys_to_delete:
            user_data[user_id].pop(key, None)

    except Exception as e:
        logging.error(f"Result error: {e}", exc_info=True)
        bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫"""
    try:
        user_id = call.message.chat.id
        data = call.data

        if data == "restart":
            user_data.pop(user_id, None)  # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            start_handler(call.message)

        elif data == "share":
            animal = user_data.get(user_id, {}).get("result_animal", "–∂–∏–≤–æ—Ç–Ω–æ–µ")
            share_text = (
                f"–ú–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ ‚Äî {animal}! ü¶Å\n"
                "–ü—Ä–æ–π–¥–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–π —Å–≤–æ—ë: @MoscowZooBot"
            )
            bot.send_message(user_id, f"üì© –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n{share_text}")

        elif data == "feedback":
            msg = bot.send_message(user_id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:")
            bot.register_next_step_handler(msg, save_feedback)

        elif data == "contact":
            animal = user_data.get(user_id, {}).get("result_animal", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ")
            contact_msg = (
                "üì¨ –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ–ø–µ–∫–∏:\n\n"
                f"–í–∞—à–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {animal}\n"
                "Email: opeka@moscowzoo.ru\n"
                "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 777-77-77"
            )
            bot.send_message(user_id, contact_msg)

    except ApiException as e:
        logging.error(f"Callback API error: {e}")
    except Exception as e:
        logging.error(f"Callback error: {e}", exc_info=True)
        bot.send_message(user_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def save_feedback(message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞"""
    try:
        user_id = message.chat.id
        feedback = message.text.strip()

        if len(feedback) < 10:
            bot.send_message(user_id, "‚ùå –û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")
            return

        if user_id in user_data:
            user_data[user_id]["feedback"] = feedback

        bot.send_message(user_id, "‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
        logging.info(f"Feedback from {user_id}: {feedback[:100]}")

    except Exception as e:
        logging.error(f"Feedback save error: {e}", exc_info=True)
        bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def fallback_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.chat.id
    if message.text.startswith('/'):
        bot.send_message(user_id, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    else:
        print(1)
        bot.send_message(user_id, "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤")